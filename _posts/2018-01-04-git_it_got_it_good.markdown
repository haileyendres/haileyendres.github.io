---
layout: post
title:      "Git it, Got it, Good?"
date:       2018-01-04 18:22:53 +0000
permalink:  git_it_got_it_good
---


Seriously.. did you get it though? Git and Github are such crucial aspecs to be comfortable with being a developer. The Git world is so large though it can be very confusing. Between remembering all the commands to commit, making new branches, or even submiting a pull request. Learning when to do it, how often to do it, how to actually do it.. it is a lot to take in in the beginning and nor do I claim to have wrapped my head around the whole thing either. Coming into this not ever having used these tools was rough! I have began to understand more and more over time. I understand conceptually much more than I do in practice, but much of this is just due to inexperience. Although, I am very confindent that the futher into school I get the harder I will laughing at this very post, but thats enough of the babbling. I am going to break this all down just a bit for the my fellow bretheran out there who have felt this over whelming fear of the unkown. What is Github? It is a web-based Git version control repository hosting service. Excuse me? In lamin terms please and thank you.. Git is used to store the source code for a project and track the complete history of all changes to that code. What is a repository? A repository is a central location in which data is stored and managed. Its your coding bank account. Its the place to store and work on your projects so that they are easily accessed at any time. A repository has three levels.. the working directory, the index, and the head. So lets say that we are working on a new project. We would create a remote repository by using the command "git init" or lets say you wish to open a project that you are working on for the first time that is already a pre-existing repository, you wouls use the command "git clone (and insert path to repository here)". Once inside to this storage locker of code you have many many git related options. You could start a new branch "git branch -b" or move to a branch that already exists "git checkout (insert branch here)" Once in a branch we can add code, erase code, replace code, or whatever it is that will land you where you need to be, but what do you do to make it stick? To add it to the master directory?We can "git add" which pushes to index, "git commit" which pushes to head, "git push" which adds a branch to the remote repository. Commit cant commit till you add and push cant push until you commit. Its a chain and should be followed in that order. These few things here are just the basics. The simplest of the simple, but the most essencial as well.Use this beginning info and jump in. Practice, practice, practice, and you will learn things I probably havent even heard of yet.  So jump in test the waters and just do it. That is what I am doing.. adventure time!
